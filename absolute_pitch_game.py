# -*- coding: utf-8 -*-
"""Absolute pitch Game.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Oov_2sqG9xNIMFmRJy7GUP6DmFZwDfa

Importing
"""

#Load the relevant modules
import IPython
from IPython.display import Audio
import random
from time import sleep

"""loading sounds"""

#Load the sounds into variables and sort them into dictionaries
mn2a = Audio("/content/Minor 2nd - A.m4a", autoplay=True)
mn2b = Audio("/content/Minor 2nd - B.m4a", autoplay=True)
mn2c = Audio("/content/Minor 2nd - C.m4a", autoplay=True)
mn2f_d = Audio("/content/Minor 2nd - F#.m4a", autoplay=True)
mn2f = Audio("/content/Minor 2nd - F.m4a", autoplay=True)
mj2a = Audio("/content/Major 2nd - A.m4a", autoplay=True)
mj2c = Audio("/content/Major 2nd - C.m4a", autoplay=True)
mj2d = Audio("/content/Major 2nd - D.m4a", autoplay=True)
mj2e = Audio("/content/Major 2nd - E.m4a", autoplay=True)
mj2g_d = Audio("/content/Major 2nd - G#.m4a", autoplay=True)
mn3a = Audio("/content/Minor 3rd - A.m4a", autoplay=True)
mn3c = Audio("/content/Minor 3rd - C.m4a", autoplay=True)
mn3e = Audio("/content/Minor 3rd - E.m4a", autoplay=True)
mn3f_d = Audio("/content/Minor 3rd - F#.m4a", autoplay=True)
mn3g = Audio("/content/Minor 3rd - G.m4a", autoplay=True)
mj3b = Audio("/content/Major 3rd - B.m4a", autoplay=True)
mj3c = Audio("/content/Major 3rd - C.m4a", autoplay=True)
mj3d_d = Audio("/content/Major 3rd - D#.m4a", autoplay=True)
mj3e = Audio("/content/Major 3rd - E.m4a", autoplay=True)
mj3f_d = Audio("/content/Major 3rd - F#.m4a", autoplay=True)
p4a_d = Audio("/content/Perfect 4th - A#.m4a", autoplay=True)
p4a = Audio("/content/Perfect 4th - A.m4a", autoplay=True)
p4c = Audio("/content/Perfect 4th - C.m4a", autoplay=True)
p4d_d = Audio("/content/Perfect 4th - D#.m4a", autoplay=True)
p4f = Audio("/content/Perfect 4th - F.m4a", autoplay=True)
tb = Audio("/content/Tritone - B.m4a", autoplay=True)
tc_d = Audio("/content/Tritone - C#.m4a", autoplay=True)
tc = Audio("/content/Tritone - C.m4a", autoplay=True)
td = Audio("/content/Tritone - D.m4a", autoplay=True)
tg = Audio("/content/Tritone - G.m4a", autoplay=True)
p5a = Audio("/content/Perfect 5th - A.m4a", autoplay=True)
p5b = Audio("/content/Perfect 5th - B.m4a", autoplay=True)
p5d = Audio("/content/Perfect 5th - D.m4a", autoplay=True)
p5e = Audio("/content/Perfect 5th - E.m4a", autoplay=True)
p5f_d = Audio("/content/Perfect 5th - F#.m4a", autoplay=True)
mn6a = Audio("/content/Minor 6th - A.m4a", autoplay=True)
mn6b = Audio("/content/Minor 6th - B.m4a", autoplay=True)
mn6d = Audio("/content/Minor 6th - D.m4a", autoplay=True)
mn6f_d = Audio("/content/Minor 6th - F#.m4a", autoplay=True)
mn6g_d = Audio("/content/Minor 6th - G#.m4a", autoplay=True)
mj6b = Audio("/content/Major 6th - B.m4a", autoplay=True)
mj6c = Audio("/content/Major 6th - C.m4a", autoplay=True)
mj6d = Audio("/content/Major 6th - D.m4a", autoplay=True)
mj6e = Audio("/content/Major 6th - E.m4a", autoplay=True)
mj6g = Audio("/content/Major 6th - G.m4a", autoplay=True)
mn7a_d = Audio("/content/Minor 7th - A#.m4a", autoplay=True)
mn7b = Audio("/content/Minor 7th - B.m4a", autoplay=True)
mn7c = Audio("/content/Minor 7th - C.m4a", autoplay=True)
mn7d_d = Audio("/content/Minor 7th - D#.m4a", autoplay=True)
mn7e = Audio("/content/Minor 7th - E.m4a", autoplay=True)
mj7a_d = Audio("/content/Major 7th - A#.m4a", autoplay=True)
mj7b = Audio("/content/Major 7th - B.m4a", autoplay=True)
mj7e = Audio("/content/Major 7th - E.m4a", autoplay=True)
mj7f = Audio("/content/Major 7th - F.m4a", autoplay=True)
mj7g = Audio("/content/Major 7th - G.m4a", autoplay=True)
oa = Audio("/content/Octave - A.m4a", autoplay=True)
oc = Audio("/content/Octave - C.m4a", autoplay=True)
od = Audio("/content/Octave - D.m4a", autoplay=True)
of_d = Audio("/content/Octave - F#.m4a", autoplay=True)
og = Audio("/content/Octave - G.m4a", autoplay=True)
ca = Audio("/content/A.m4a", autoplay=True)
cc = Audio("/content/C.m4a", autoplay=True)
cd_d = Audio("/content/D#.m4a", autoplay=True)
cd = Audio("/content/D.m4a", autoplay=True)
cg_d = Audio("/content/G#.m4a", autoplay=True)
cam = Audio("/content/Am.m4a", autoplay=True)
cbm = Audio("/content/Bm.m4a", autoplay=True)
cc_dm = Audio("/content/C#m.m4a", autoplay=True)
cdm = Audio("/content/Dm.m4a", autoplay=True)
cem = Audio("/content/Em.m4a", autoplay=True)
ca_dd = Audio("/content/A#dim.m4a", autoplay=True)
cad = Audio("/content/Adim.m4a", autoplay=True)
ced = Audio("/content/Edim.m4a", autoplay=True)
cf_dd = Audio("/content/F#dim.m4a", autoplay=True)
cgd = Audio("/content/Gdim.m4a", autoplay=True)
cc_da = Audio("/content/C#aug.m4a", autoplay=True)
cca = Audio("/content/Caug.m4a", autoplay=True)
cfa = Audio("/content/Faug.m4a", autoplay=True)
cg_da = Audio("/content/G#aug.m4a", autoplay=True)
cga = Audio("/content/Gaug.m4a", autoplay=True)
ca7 = Audio("/content/A7.m4a", autoplay=True)
cc7 = Audio("/content/C7.m4a", autoplay=True)
ce7 = Audio("/content/E7.m4a", autoplay=True)
cf_d7 = Audio("/content/F#7.m4a", autoplay=True)
cg7 = Audio("/content/G7.m4a", autoplay=True)
camj7 = Audio("/content/Amaj7.m4a", autoplay=True)
cbmj7 = Audio("/content/Bmaj7.m4a", autoplay=True)
ccmj7 = Audio("/content/Cmaj7.m4a", autoplay=True)
cdmj7 = Audio("/content/Dmaj7.m4a", autoplay=True)
cf_dmj7 = Audio("/content/F#maj7.m4a", autoplay=True)
cam7 = Audio("/content/Am7.m4a", autoplay=True)
ccm7 = Audio("/content/Cm7.m4a", autoplay=True)
cd_dm7 = Audio("/content/D#m7.m4a", autoplay=True)
cfm7 = Audio("/content/Fm7.m4a", autoplay=True)
cg_dm7 = Audio("/content/G#m7.m4a", autoplay=True)
cammj7 = Audio("/content/AmM7.m4a", autoplay=True)
cdmmj7 = Audio("/content/DmM7.m4a", autoplay=True)
cemmj7 = Audio("/content/EmM7.m4a", autoplay=True)
cf_dmmj7 = Audio("/content/F#mM7.m4a", autoplay=True)
cfmmj7 = Audio("/content/FmM7.m4a", autoplay=True)

intervals_dict = {1:[mn2a, mn2b, mn2c, mn2f_d, mn2f], 
                  2:[mj2a, mj2c, mj2d, mj2e, mj2g_d],
                  3:[mn3a, mn3c, mn3e, mn3f_d, mn3g],
                  4:[mj3b, mj3c, mj3d_d, mj3e, mj3f_d],
                  5:[p4a_d, p4a, p4c, p4d_d, p4f],
                  6:[tb, tc_d, tc, td, tg],
                  7:[p5a, p5b, p5d, p5e, p5f_d],
                  8:[mn6a, mn6b, mn6d, mn6f_d, mn6g_d],
                  9:[mj6b, mj6c, mj6d, mj6e, mj6g],
                  10:[mn7a_d, mn7b, mn7c, mn7d_d, mn7e],
                  11:[mj7a_d, mj7b, mj7e, mj7f, mj7g],
                  12:[oa, oc, od, of_d, og]}

chords_dict = {1:[ca, cc, cd_d, cd, cg_d],
               2:[cam, cbm, cc_dm, cdm, cem],
               3:[ca_dd, cad, ced, cf_dd, cgd],
               4:[cc_da, cca, cfa, cg_da, cga],
               5:[ca7, cc7, ce7, cf_d7, cg7],
               6:[camj7, cbmj7, ccmj7, cdmj7, cf_dmj7],
               7:[cam7, ccm7, cd_dm7, cfm7, cg_dm7],
               8:[cammj7, cdmmj7, cemmj7, cf_dmmj7, cfmmj7]}

#define dictionary for names (for easy printing)
interval_name = {1:"Minor 2nd", 2:"Major 2nd", 3:"Minor 3rd", 4:"Major 3rd", 5:"Perfect 4th", 6:"Tritone", 7:"Perfect 5th", 8:"Minor 6th", 9:"Major 6th", 10:"Minor 7th", 11:"Major 7th", 12:"Octave"}
chord_name = {1:"Major", 2:"Minor", 3:"Diminished", 4:"Augmented", 5:"Dominant 7", 6:"Major 7", 7:"Minor 7", 8:"Minor Major 7"}

#since gui is not supported in collab - options to choose from are printed to the user
guidance_text_interval = "*"*20 + "\n(1)  Minor 2nd\n(2)  Major 2nd\n(3)  Minor 3rd\n(4)  Major 3rd\n(5)  Perfect 4th\n(6)  Tritone\n(7)  Perfect 5th\n"
guidance_text_interval = guidance_text_interval + "(8)  Minor 6th\n(9)  Major 6th\n(10) Minor 7th\n(11) Major 7th\n(12) Octave\n" + "*"*20
guidance_text_chord = "*"*20 + "\n(1)  Major\n(2)  Minor\n(3)  Diminished\n(4)  Augmented\n(5)  Dominant 7\n(6)  Major 7\n(7)  Minor 7\n(8)  Minor Major 7\n" + "*"*20

"""Functions"""

#Function that chooses random sound from the interval dictionary
def choose_random_interval():
  int_key = random.choice([1,2,3,4,5,6,7,8,9,10,11,12])
  int_index = random.choice([0,1,2,3,4])
  return int_key, int_index, intervals_dict[int_key][int_index]

#Function that chooses random sound from the chord dictionary
def choose_random_chord():
  ch_key = random.choice([1,2,3,4,5,6,7,8])
  ch_index = random.choice([0,1,2,3,4])
  return ch_key, ch_index, chords_dict[ch_key][ch_index]

# creating "interval" object type - for practice
class Interval:
    def __init__(self, name, id, sound, correct_answers, count_questions):
        self.name = name
        self.id = id
        self.sound = sound
        self.correct_answers = correct_answers
        self.count_questions = count_questions

    def score(self):
        
        score = self.correct_answers / self.count_questions if self.count_questions else 0 # to avoid division by zero
        return score

    def autoplay_sound(self):
        autoplay_sound = Audio(self.sound, autoplay=True)
        return display(autoplay_sound)

    def play_sound(self):
        play_sound = IPython.display.Audio(self.sound)
        return display(play_sound)
        

# creating all interval objects
minor_2nd = Interval(name='Minor 2nd',
                     id = 1,
                     sound = '/content/Minor 2nd - A.m4a',
                     correct_answers = 0,
                     count_questions = 0)

major_2nd = Interval(name='Major 2nd',
                     id = 2,
                     sound = '/content/Major 2nd - A.m4a',
                     correct_answers = 0,
                     count_questions = 0)

minor_3rd = Interval(name='Minor 3rd',
                     id = 3,
                     sound = '/content/Minor 3rd - A.m4a',
                     correct_answers = 0,
                     count_questions = 0)

major_3rd = Interval(name='Major 3rd',
                     id = 4,
                     sound = '/content/Major 3rd - B.m4a',
                     correct_answers = 0,
                     count_questions = 0)

perfect_4th = Interval(name='Perfect 4th',
                       id = 5,
                       sound = '/content/Perfect 4th - A.m4a',
                       correct_answers = 0,
                       count_questions = 0)

tritone = Interval(name='Tritone',
                   id = 6,
                   sound = '/content/Tritone - B.m4a',
                   correct_answers = 0,
                   count_questions = 0)

perfect_5th = Interval(name='Perfect 5th',
                       id = 7,
                       sound = '/content/Perfect 5th - A.m4a',
                       correct_answers = 0,
                       count_questions = 0)

minor_6th = Interval(name='Minor 6th',
                     id = 8,
                     sound = '/content/Minor 6th - A.m4a',
                     correct_answers = 0,
                     count_questions = 0)

major_6th = Interval(name='Major 6th',
                     id = 9,
                     sound = '/content/Major 6th - B.m4a',
                     correct_answers = 0,
                     count_questions = 0)

minor_7th = Interval(name='Minor 7th',
                     id = 10,
                     sound = '/content/Minor 7th - A#.m4a',
                     correct_answers = 0,
                     count_questions = 0)

major_7th = Interval(name='Major 7th',
                     id = 11,
                     sound = '/content/Major 7th - A#.m4a',
                     correct_answers = 0,
                     count_questions = 0)

octave = Interval(name='Octave',
                  id = 12,
                  sound = '/content/Octave - A.m4a',
                  correct_answers = 0,
                  count_questions = 0)

#Function - Intervals game round
def intervals_round(int_rounds):
  round = 0
  result = 0
  final_text = "\n"
  print(guidance_text_interval)
  while round < int_rounds:
    round += 1
    checked_key, checked_index, current_sound = choose_random_interval()
    display(current_sound)
    sleep(0.05)
    print("What is the interval that you hear?")
    while True:
      try:
          user_answer = int(input())
      except ValueError:
          print("Sorry, I didn't understand that. Please insert an integer between 1 to 12")
          continue

      if user_answer not in range(1,13):
          print("Sorry, your response must be between 1 to 12")
          continue
      else:
          break
    final_text = final_text + "Round " + str(round) + " : Interval checked - " + interval_name[checked_key] + " (number " + str(checked_key) + ") and the response was " + str(user_answer) + "\n"
    if user_answer == checked_key:
      result += 1
    else: result += 0
  return result, final_text

#Function - Chords game round
def chords_round(chord_rounds):
  round = 0
  result = 0
  final_text = "\n"
  print(guidance_text_chord)
  while round < chord_rounds:
    round += 1
    checked_key, checked_index, current_sound = choose_random_chord()
    display(current_sound)
    sleep(3)
    print("What is the chord that you hear?")
    while True:
      try:
          user_answer = int(input())
      except ValueError:
          print("Sorry, I didn't understand that. Please insert an integer between 1 to 8")
          continue

      if user_answer not in range(1,9):
          print("Sorry, your response must be between 1 to 8")
          continue
      else:
          break
    final_text = final_text + "Round " + str(round) + " : Chord checked - " + chord_name[checked_key] + " (number " + str(checked_key) + ") and the response was " + str(user_answer) + "\n"
    if user_answer == checked_key:
      result += 1
    else: result += 0
  return result, final_text

#Main playing function
def lets_play():
  print("WELCOME TO THE GAME!!!\n")
  sleep(1)
  print("Round 1 - Identify the intervals")
  sleep(1)
  print("How many steps for the first round?")
  while True:
      try:
          int_rounds = int(input())
      except ValueError:
          print("Sorry, I didn't understand that. Please insert an integer")
          continue
      else: break
  interval_result, final_text_interval = intervals_round(int_rounds)
  print("Round 2 - Identify the chords")
  sleep(1)
  print("How many steps for the first round?")
  while True:
      try:
          chord_rounds = int(input())
      except ValueError:
          print("Sorry, I didn't understand that. Please insert an integer")
          continue
      else: break
  chord_result, final_text_chord = chords_round(chord_rounds)
  calculated_result = (interval_result + chord_result) / (int_rounds + chord_rounds) *100

  print("*"*50 + "\nYOUR RESULT IS " + "{:.2f}".format(calculated_result) + "%\n" + "*"*50)
  print("\n"*3 + "*"*40 + "\nYou have guessed correctly " + str(interval_result) + " intervals out of " + str(int_rounds) + "!\n" + "*"*40)
  print(final_text_interval)
  print("\n"*3 + "*"*40 + "\nYou have guessed correctly " + str(chord_result) + " chords out of " + str(chord_rounds) +"!\n" + "*"*40)
  print(final_text_chord)

# Function - Intervals practice round

def practice():

  # making a list for loop through class objects
  intervals_list = [minor_2nd, major_2nd, minor_3rd, major_3rd, perfect_4th, tritone, perfect_5th, minor_6th, major_6th, minor_7th, major_7th, octave]
  
  
  num_of_steps = int(input('How many steps would you like to practice?\n'))
  print('Your options are:')
  #  print options to choose from
  for option in range(num_of_steps):
    print(intervals_list[option].id, intervals_list[option].name)

  # slicing the list based on user choice
  intervals_list = intervals_list[:num_of_steps]  

  correct_list = []
  while True:
  # loop through intervals
    for i in range(num_of_steps):
    # create random list
      random.shuffle(intervals_list)  
      if intervals_list[i].score() < 0.7:
        intervals_list[i].autoplay_sound() 
        sleep(0.05)

        answer = input('What is the interval that you hear?\nType interval number\n')
        # if correct answer
        if int(answer) == intervals_list[i].id:
          intervals_list[i].correct_answers += 1    
          intervals_list[i].count_questions += 1
          print('Correct answer!')
        # if wrong answer  
        else: 
          intervals_list[i].count_questions += 1
          print('Bad answer')
      else:
        correct_list.append(intervals_list[i])

    # checking if all answers are correct   
    if len(set(correct_list)) == len(intervals_list):
      break



  print('The exercise ended successfully')

"""Lets Play"""

# lets_play()
# practice()