# -*- coding: utf-8 -*-
"""Absolute pitch Game.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Oov_2sqG9xNIMFmRJy7GUP6DmFZwDfa

Importing
"""

# Load the relevant modules
import IPython
from IPython.display import Audio
import random
from time import sleep

"""loading sounds"""

# Load the sounds into variables and sort them into dictionaries
mn2a = "/content/Minor 2nd - A.m4a"
mn2b = "/content/Minor 2nd - B.m4a"
mn2c = "/content/Minor 2nd - C.m4a"
mn2f_d = "/content/Minor 2nd - F#.m4a"
mn2f = "/content/Minor 2nd - F.m4a"
mj2a = "/content/Major 2nd - A.m4a"
mj2c = "/content/Major 2nd - C.m4a"
mj2d = "/content/Major 2nd - D.m4a"
mj2e = "/content/Major 2nd - E.m4a"
mj2g_d = "/content/Major 2nd - G#.m4a"
mn3a = "/content/Minor 3rd - A.m4a"
mn3c = "/content/Minor 3rd - C.m4a"
mn3e = "/content/Minor 3rd - E.m4a"
mn3f_d = "/content/Minor 3rd - F#.m4a"
mn3g = "/content/Minor 3rd - G.m4a"
mj3b = "/content/Major 3rd - B.m4a"
mj3c = "/content/Major 3rd - C.m4a"
mj3d_d = "/content/Major 3rd - D#.m4a"
mj3e = "/content/Major 3rd - E.m4a"
mj3f_d = "/content/Major 3rd - F#.m4a"
p4a_d = "/content/Perfect 4th - A#.m4a"
p4a = "/content/Perfect 4th - A.m4a"
p4c = "/content/Perfect 4th - C.m4a"
p4d_d = "/content/Perfect 4th - D#.m4a"
p4f = "/content/Perfect 4th - F.m4a"
tb = "/content/Tritone - B.m4a"
tc_d = "/content/Tritone - C#.m4a"
tc = "/content/Tritone - C.m4a"
td = "/content/Tritone - D.m4a"
tg = "/content/Tritone - G.m4a"
p5a = "/content/Perfect 5th - A.m4a"
p5b = "/content/Perfect 5th - B.m4a"
p5d = "/content/Perfect 5th - D.m4a"
p5e = "/content/Perfect 5th - E.m4a"
p5f_d = "/content/Perfect 5th - F#.m4a"
mn6a = "/content/Minor 6th - A.m4a"
mn6b = "/content/Minor 6th - B.m4a"
mn6d = "/content/Minor 6th - D.m4a"
mn6f_d = "/content/Minor 6th - F#.m4a"
mn6g_d = "/content/Minor 6th - G#.m4a"
mj6b = "/content/Major 6th - B.m4a"
mj6c = "/content/Major 6th - C.m4a"
mj6d = "/content/Major 6th - D.m4a"
mj6e = "/content/Major 6th - E.m4a"
mj6g = "/content/Major 6th - G.m4a"
mn7a_d = "/content/Minor 7th - A#.m4a"
mn7b = "/content/Minor 7th - B.m4a"
mn7c = "/content/Minor 7th - C.m4a"
mn7d_d = "/content/Minor 7th - D#.m4a"
mn7e = "/content/Minor 7th - E.m4a"
mj7a_d = "/content/Major 7th - A#.m4a"
mj7b = "/content/Major 7th - B.m4a"
mj7e = "/content/Major 7th - E.m4a"
mj7f = "/content/Major 7th - F.m4a"
mj7g = "/content/Major 7th - G.m4a"
oa = "/content/Octave - A.m4a"
oc = "/content/Octave - C.m4a"
od = "/content/Octave - D.m4a"
of_d = "/content/Octave - F#.m4a"
og = "/content/Octave - G.m4a"
ca = "/content/A.m4a"
cc = "/content/C.m4a"
cd_d = "/content/D#.m4a"
cd = "/content/D.m4a"
cg_d = "/content/G#.m4a"
cam = "/content/Am.m4a"
cbm = "/content/Bm.m4a"
cc_dm = "/content/C#m.m4a"
cdm = "/content/Dm.m4a"
cem = "/content/Em.m4a"
ca_dd = "/content/A#dim.m4a"
cad = "/content/Adim.m4a"
ced = "/content/Edim.m4a"
cf_dd = "/content/F#dim.m4a"
cgd = "/content/Gdim.m4a"
cc_da = "/content/C#aug.m4a"
cca = "/content/Caug.m4a"
cfa = "/content/Faug.m4a"
cg_da = "/content/G#aug.m4a"
cga = "/content/Gaug.m4a"
ca7 = "/content/A7.m4a"
cc7 = "/content/C7.m4a"
ce7 = "/content/E7.m4a"
cf_d7 = "/content/F#7.m4a"
cg7 = "/content/G7.m4a"
camj7 = "/content/Amaj7.m4a"
cbmj7 = "/content/Bmaj7.m4a"
ccmj7 = "/content/Cmaj7.m4a"
cdmj7 = "/content/Dmaj7.m4a"
cf_dmj7 = "/content/F#maj7.m4a"
cam7 = "/content/Am7.m4a"
ccm7 = "/content/Cm7.m4a"
cd_dm7 = "/content/D#m7.m4a"
cfm7 = "/content/Fm7.m4a"
cg_dm7 = "/content/G#m7.m4a"
cammj7 = "/content/AmM7.m4a"
cdmmj7 = "/content/DmM7.m4a"
cemmj7 = "/content/EmM7.m4a"
cf_dmmj7 = "/content/F#mM7.m4a"
cfmmj7 = "/content/FmM7.m4a"

intervals_dict = {1:[mn2a, mn2b, mn2c, mn2f_d, mn2f], 
                  2:[mj2a, mj2c, mj2d, mj2e, mj2g_d],
                  3:[mn3a, mn3c, mn3e, mn3f_d, mn3g],
                  4:[mj3b, mj3c, mj3d_d, mj3e, mj3f_d],
                  5:[p4a_d, p4a, p4c, p4d_d, p4f],
                  6:[tb, tc_d, tc, td, tg],
                  7:[p5a, p5b, p5d, p5e, p5f_d],
                  8:[mn6a, mn6b, mn6d, mn6f_d, mn6g_d],
                  9:[mj6b, mj6c, mj6d, mj6e, mj6g],
                  10:[mn7a_d, mn7b, mn7c, mn7d_d, mn7e],
                  11:[mj7a_d, mj7b, mj7e, mj7f, mj7g],
                  12:[oa, oc, od, of_d, og]}

chords_dict = {1:[ca, cc, cd_d, cd, cg_d],
               2:[cam, cbm, cc_dm, cdm, cem],
               3:[ca_dd, cad, ced, cf_dd, cgd],
               4:[cc_da, cca, cfa, cg_da, cga],
               5:[ca7, cc7, ce7, cf_d7, cg7],
               6:[camj7, cbmj7, ccmj7, cdmj7, cf_dmj7],
               7:[cam7, ccm7, cd_dm7, cfm7, cg_dm7],
               8:[cammj7, cdmmj7, cemmj7, cf_dmmj7, cfmmj7]}

#define dictionary for names (for easy printing)
interval_name = {1:"Minor 2nd", 2:"Major 2nd", 3:"Minor 3rd", 4:"Major 3rd", 5:"Perfect 4th", 6:"Tritone", 7:"Perfect 5th", 8:"Minor 6th", 9:"Major 6th", 10:"Minor 7th", 11:"Major 7th", 12:"Octave"}
chord_name = {1:"Major", 2:"Minor", 3:"Diminished", 4:"Augmented", 5:"Dominant 7", 6:"Major 7", 7:"Minor 7", 8:"Minor Major 7"}

#since gui is not supported in collab - options to choose from are printed to the user
guidance_text_interval = "*"*20 + "\n(1)  Minor 2nd\n(2)  Major 2nd\n(3)  Minor 3rd\n(4)  Major 3rd\n(5)  Perfect 4th\n(6)  Tritone\n(7)  Perfect 5th\n"
guidance_text_interval = guidance_text_interval + "(8)  Minor 6th\n(9)  Major 6th\n(10) Minor 7th\n(11) Major 7th\n(12) Octave\n" + "*"*20
guidance_text_chord = "*"*20 + "\n(1)  Major\n(2)  Minor\n(3)  Diminished\n(4)  Augmented\n(5)  Dominant 7\n(6)  Major 7\n(7)  Minor 7\n(8)  Minor Major 7\n" + "*"*20

"""Functions"""

#Function that chooses random sound from the interval dictionary
def choose_random_interval():
  int_key = random.choice([1,2,3,4,5,6,7,8,9,10,11,12])
  int_index = random.choice([0,1,2,3,4])
  return int_key, int_index, intervals_dict[int_key][int_index]

#Function that chooses random sound from the chord dictionary
def choose_random_chord():
  ch_key = random.choice([1,2,3,4,5,6,7,8])
  ch_index = random.choice([0,1,2,3,4])
  return ch_key, ch_index, chords_dict[ch_key][ch_index]

"""creating new type of object - **Intervals**
with attributes:

*   **name** (string)
*   **id** (int)
*   **sound** (list)
*   **num of correct answers** (int)
*   **num of questions** (int)

and **methods**:

*   **score** - percent of  correct answers
*   **play_sound** - required click to play sound
*   **autoplay_sound** - auto play

"""

# creating "interval" object type
class Interval:
    def __init__(self, name, id, sound, correct_answers, count_questions):
        self.name = name
        self.id = id
        self.sound = sound
        self.correct_answers = correct_answers
        self.count_questions = count_questions

    def score(self):
        score = self.correct_answers / self.count_questions if self.count_questions else 0 # to avoid division by zero
        return score

    # function that chooses random sound from the interval lilst and play it
    def autoplay_sound(self):
        i = random.choice([0,1,2,3,4]) 
        autoplay_sound = Audio(self.sound[i], autoplay=True)
        return display(autoplay_sound)

    def play_sound(self):
        play_sound = IPython.display.Audio(self.sound)
        return display(play_sound)


# creating all interval objects
minor_2nd = Interval(name='Minor 2nd',
                     id = 1,
                     sound = [],
                     correct_answers = 0,
                     count_questions = 0)

major_2nd = Interval(name='Major 2nd',
                     id = 2,
                     sound = [],
                     correct_answers = 0,
                     count_questions = 0)

minor_3rd = Interval(name='Minor 3rd',
                     id = 3,
                     sound = [],
                     correct_answers = 0,
                     count_questions = 0)

major_3rd = Interval(name='Major 3rd',
                     id = 4,
                     sound = [],
                     correct_answers = 0,
                     count_questions = 0)

perfect_4th = Interval(name='Perfect 4th',
                       id = 5,
                       sound = [],
                       correct_answers = 0,
                       count_questions = 0)

tritone = Interval(name='Tritone',
                   id = 6,
                   sound = [],
                   correct_answers = 0,
                   count_questions = 0)

perfect_5th = Interval(name='Perfect 5th',
                       id = 7,
                       sound = [],
                       correct_answers = 0,
                       count_questions = 0)

minor_6th = Interval(name='Minor 6th',
                     id = 8,
                     sound = [],
                     correct_answers = 0,
                     count_questions = 0)

major_6th = Interval(name='Major 6th',
                     id = 9,
                     sound = [],
                     correct_answers = 0,
                     count_questions = 0)

minor_7th = Interval(name='Minor 7th',
                     id = 10,
                     sound = [],
                     correct_answers = 0,
                     count_questions = 0)

major_7th = Interval(name='Major 7th',
                     id = 11,
                     sound = [],
                     correct_answers = 0,
                     count_questions = 0)

octave = Interval(name='Octave',
                  id = 12,
                  sound = [],
                  correct_answers = 0,
                  count_questions = 0)

# create list of objects 
intervals_list_for_loading = [minor_2nd, major_2nd, minor_3rd, major_3rd, perfect_4th, tritone, perfect_5th, minor_6th, major_6th, minor_7th, major_7th, octave]

#  load list of sounds for every interval object
for i in range(len(intervals_list_for_loading)):
  intervals_list_for_loading[i].sound = intervals_dict[i+1]

"""creating new type of object - **Chords**
with attributes:

*   **name** (string)
*   **id** (int)
*   **sound** (list)
*   **num of correct answers** (int)
*   **num of questions** (int)

and **methods**:

*   **score** - percent of  correct answers
*   **play_sound** - required click to play sound
*   **autoplay_sound** - auto play

"""

# creating "chords" object type
class Chords:
    def __init__(self, name, id, sound, correct_answers, count_questions):
        self.name = name
        self.id = id
        self.sound = sound
        self.correct_answers = correct_answers
        self.count_questions = count_questions

    def score(self):
        score = self.correct_answers / self.count_questions if self.count_questions else 0 # to avoid division by zero
        return score

    def autoplay_sound(self):
        i = random.choice([0,1,2,3,4]) 
        autoplay_sound = Audio(self.sound[i], autoplay=True)
        return display(autoplay_sound)

    def play_sound(self):
        play_sound = IPython.display.Audio(self.sound)
        return display(play_sound)


# creating all interval objects
Major = Chords(name='Major',
                     id = 1,
                     sound = [],
                     correct_answers = 0,
                     count_questions = 0)

Minor = Chords(name='Minor',
                     id = 2,
                     sound = [],
                     correct_answers = 0,
                     count_questions = 0)

Diminished = Chords(name='Diminished',
                     id = 3,
                     sound = [],
                     correct_answers = 0,
                     count_questions = 0)

Augmented = Chords(name='Augmented',
                     id = 4,
                     sound = [],
                     correct_answers = 0,
                     count_questions = 0)

Dominant_7 = Chords(name='Dominant 7',
                       id = 5,
                       sound = [],
                       correct_answers = 0,
                       count_questions = 0)

Major_7 = Chords(name='Major 7',
                   id = 6,
                   sound = [],
                   correct_answers = 0,
                   count_questions = 0)

Minor_7 = Chords(name='Minor 7',
                       id = 7,
                       sound = [],
                       correct_answers = 0,
                       count_questions = 0)

Minor_Major_7 = Chords(name='Minor Major 7',
                     id = 8,
                     sound = [],
                     correct_answers = 0,
                     count_questions = 0)


# create list of objects 
chords_list_for_loading = [Major, Minor, Diminished, Augmented, Dominant_7, Major_7, Minor_7, Minor_Major_7]

# load list of sounds for every interval object
for i in range(len(chords_list_for_loading)):
  chords_list_for_loading[i].sound = chords_dict[i+1]

#Function - Intervals game round
def intervals_round(int_rounds):
  round = 0
  result = 0
  final_text = "\n"
  print(guidance_text_interval)
  while round < int_rounds:
    round += 1
    checked_key, checked_index, current_sound = choose_random_interval()
    display(Audio(current_sound, autoplay=True))
    sleep(0.05)
    print("What is the interval that you hear?")
    while True:
      try:
          user_answer = int(input())
      except ValueError:
          print("Sorry, I didn't understand that. Please insert an integer between 1 to 12")
          continue

      if user_answer not in range(1,13):
          print("Sorry, your response must be between 1 to 12")
          continue
      else:
          break
    if user_answer == checked_key:
      result += 1
      final_text = final_text + "Round {} [CORRECT]: Interval checked - {:<11} : The response was - {:<11}\n".format(round, interval_name[checked_key], interval_name[user_answer])
    else: 
      result += 0
      final_text = final_text + "Round {} [WRONG]  : Interval checked - {:<11} : The response was - {:<11}\n".format(round, interval_name[checked_key], interval_name[user_answer])
  return result, final_text

#Function - Chords game round
def chords_round(chord_rounds):
  round = 0
  result = 0
  final_text = "\n"
  print(guidance_text_chord)
  while round < chord_rounds:
    round += 1
    checked_key, checked_index, current_sound = choose_random_chord()
    display(Audio(current_sound, autoplay=True))
    sleep(3)
    print("What is the chord that you hear?")
    while True:
      try:
          user_answer = int(input())
      except ValueError:
          print("Sorry, I didn't understand that. Please insert an integer between 1 to 8")
          continue

      if user_answer not in range(1,9):
          print("Sorry, your response must be between 1 to 8")
          continue
      else:
          break
    if user_answer == checked_key:
      result += 1
      final_text = final_text + "Round {} [CORRECT]: Chord checked - {:<13} : The response was - {:<13}\n".format(round, chord_name[checked_key], chord_name[user_answer])
    else: 
      result += 0
      final_text = final_text + "Round {} [WRONG]  : Chord checked - {:<13} : The response was - {:<13}\n".format(round, chord_name[checked_key], chord_name[user_answer])
  return result, final_text

#Main playing function
def lets_play():
  print("WELCOME TO THE GAME!!!\n")
  sleep(1)
  print("Round 1 - Identify the intervals")
  sleep(1)
  print("How many steps for the first round?")
  while True:
      try:
          int_rounds = int(input())
      except ValueError:
          print("Sorry, I didn't understand that. Please insert an integer")
          continue
      else: break
  interval_result, final_text_interval = intervals_round(int_rounds)
  print("Round 2 - Identify the chords")
  sleep(1)
  print("How many steps for the first round?")
  while True:
      try:
          chord_rounds = int(input())
      except ValueError:
          print("Sorry, I didn't understand that. Please insert an integer")
          continue
      else: break
  chord_result, final_text_chord = chords_round(chord_rounds)
  while True:
      try:
          calculated_result = (interval_result + chord_result) / (int_rounds + chord_rounds) *100
      except ZeroDivisionError:
          calculated_result = 0
          break
      break
  print("*"*50 + "\nYOUR RESULT IS " + "{:.2f}%".format(calculated_result) + "\n" + "*"*50)
  print("\n"*3 + "*"*40 + "\nYou have guessed correctly " + str(interval_result) + " intervals out of " + str(int_rounds) + "!\n" + "*"*40)
  print(final_text_interval)
  print("\n"*3 + "*"*40 + "\nYou have guessed correctly " + str(chord_result) + " chords out of " + str(chord_rounds) +"!\n" + "*"*40)
  print(final_text_chord)

"""The **Intervals and Chords practice** is a program which improve your musical hearing ability.

You can choose between practicing intervals or chords,

Every round you will asked to choose the number of steps that you like to practice, after that you will listen to the sound and you will be asked to select the correct interval / chord.

The sound will keep coming until you achive over 60% of correct answers for each interval / chord
"""

# create a function that handles input 
def interval_num_of_steps():
    while True:
      interval_num_of_steps = input('How many steps would you like to practice?\n')
      try:
        val = int(interval_num_of_steps)
        if val <= 12:
          break
        else:
          print("Number can't be greater than 12")
      except ValueError:
        print("Steps must be a number, try again")
    return val

def intervals_practice():

  # making a list for loop through class objects
  intervals_list = [minor_2nd, major_2nd, minor_3rd, major_3rd, perfect_4th, tritone, perfect_5th, minor_6th, major_6th, minor_7th, major_7th, octave]
  
  
# calls a function that handles input 
  num_of_steps = interval_num_of_steps()
  
  print('Your options are:')
  #  print options to choose from
  for option in range(num_of_steps):
    print(intervals_list[option].id, intervals_list[option].name)

  # slicing the list based on user choice
  intervals_list = intervals_list[:num_of_steps]  

  correct_list = []
  while True:
  # loop through intervals
    for i in range(num_of_steps):
      try:
      # create random list
        random.shuffle(intervals_list)  
        if intervals_list[i].score() < 0.6:
          # print(intervals_list[i].name, intervals_list[i].score())  # QA
          intervals_list[i].autoplay_sound() 
          sleep(0.05)

          answer = input('What is the interval that you hear?\nType interval number\n')
          
          # Checks if number is greater than num_of_steps
          if int(answer) >  int(num_of_steps):
            print("Number can't be greater than", num_of_steps, "\ntry again..")
            break
                  
          # if correct answer
          if int(answer) == intervals_list[i].id:
            intervals_list[i].correct_answers += 1    
            intervals_list[i].count_questions += 1
            print('Correct answer!')
          # if wrong answer  
          else: 
            intervals_list[i].count_questions += 1
            print('Bad answer')
        else:
          correct_list.append(intervals_list[i])
      except ValueError:
          print("Sorry, I didn't understand that. Please insert an integer")
          continue
    # checks if all answers are correct   
    if len(set(correct_list)) == len(intervals_list):
      break

  # reset values
  for i in range(len(intervals_list)):
    intervals_list[i].count_questions = 0
    intervals_list[i].correct_answers = 0    

  print('The exercise ended successfully')

# create a function that handles input 
def chord_num_of_steps():
    while True:
      chord_num_of_steps = input('How many steps would you like to practice?\n')
      try:
        val = int(chord_num_of_steps)
        if val <= 8:
          break
        else:
          print("Number can't be greater than 8")
      except ValueError:
        print("Steps must be a number, try again")
    return val

def chords_practice():

  # create a list for loop through class objects
  chords_list = [Major, Minor, Diminished, Augmented, Dominant_7, Major_7, Minor_7, Minor_Major_7]

  # calls a function that handles input 
  num_of_steps = chord_num_of_steps()

  print('Your options are:')
  # print options to choose from
  for option in range(num_of_steps):
    print(chords_list[option].id, chords_list[option].name)

  # slicing the list based on user choice
  chords_list = chords_list[:num_of_steps]  

  correct_list = []
  while True:
  # loop through intervals
    for i in range(num_of_steps):
      try:
          
      # create random list
        random.shuffle(chords_list)  
        if chords_list[i].score() < 0.6:
          chords_list[i].autoplay_sound() 
          sleep(0.05)

          answer = input('What is the chord that you hear?\nType interval number\n')
          
          # Checks if number is greater than num_of_steps
          if int(answer) >  int(num_of_steps):
            print("Number can't be greater than", num_of_steps, "\ntry again..")
            break

          # if correct answer
          if int(answer) == chords_list[i].id:
            chords_list[i].correct_answers += 1    
            chords_list[i].count_questions += 1
            print('Correct answer!')
          # if wrong answer  
          else: 
            chords_list[i].count_questions += 1
            print('Bad answer')
        else:
          correct_list.append(chords_list[i])
      except ValueError:
          print("Sorry, I didn't understand that. Please insert an integer")
          continue
    # checking if all answers are correct   
    if len(set(correct_list)) == len(chords_list):
      break

  # reset values
  for i in range(len(chords_list)):
    chords_list[i].count_questions = 0
    chords_list[i].correct_answers = 0    

  print('The exercise ended successfully')

"""Lets Play"""

#lets_play()
# intervals_practice()
chords_practice()

